### functions

# auto ls after cd
cd() {
    if [ "$#" -eq 0 ]; then
        builtin cd && ls
    else
        builtin cd "$1" && ls
    fi
}

# make dir and cd into it automatically
mkdir() { command mkdir -p "$@" && builtin cd "$1"; }

# find files in current folder
ffile() {
	command find . -name "$1" 2>&1 | grep -v 'Permission denied'
}

# find text in current folder
ftext () {
	grep -iIHrn "$1" .
}

# list files and folders in a tree format with a default level of 2
tree() {
    if [ "$#" -eq 0 ]; then
        command tree --dirsfirst -C -L 2
    else
        command tree --dirsfirst -C "$@"
    fi
}

# add colours to man
man() {
    env \
        LESS_TERMCAP_mb="$(printf '\e[1;32m')" \
        LESS_TERMCAP_md="$(printf '\e[1;32m')" \
        LESS_TERMCAP_me="$(printf '\e[0m')" \
        LESS_TERMCAP_se="$(printf '\e[0m')" \
        LESS_TERMCAP_so="$(printf '\e[1;33m')" \
        LESS_TERMCAP_ue="$(printf '\e[0m')" \
        LESS_TERMCAP_us="$(printf '\e[1;4;31m')" \
        man "$@"
}

# shows last 25 commands or shows last 10 commands including search words
hist() {
    if [ "$#" -eq 0 ]; then
        history 25
    else 
        history 1000 | grep "$*" | grep -v "hist"
    fi
}

# extract archives
extract() {
    if [ -f "$1" ] ; then
      case $1 in
        *.tar.bz2)   tar xjf $1     ;;
        *.tar.gz)    tar xzf $1     ;;
        *.bz2)       bunzip2 $1     ;;
        *.rar)       unrar e $1     ;;
        *.gz)        gunzip $1      ;;
        *.tar)       tar xf $1      ;;
        *.tbz2)      tar xjf $1     ;;
        *.tgz)       tar xzf $1     ;;
        *.zip)       unzip $1       ;;
        *.Z)         uncompress $1  ;;
        *.7z)        7z x $1        ;;
        *)     echo "Could not extract $1" ;;
         esac
     else
         echo "$1 is not a valid file"
     fi
}

# count the number of files and directories
dirstat() { 
    local files="$(ls -p | grep -v / | wc -l)"
    local dirs="$(ls -d */ 2> /dev/null | wc -l)"
    _trim "${files} files, ${dirs} directories"
}

# gets the size of a file or directory
sizeof() {
    if du -b /dev/null > /dev/null 2>&1; then
        local arg=-sbh
    else
        local arg=-sh
    fi

    if [ "$#" -eq 0 ]; then
        du "$arg" .[^.]* ./*
    else
        du "$arg" -- "$@"
    fi
}

# open github repo in browser
github() {
    git rev-parse --is-inside-work-tree &>/dev/null || echo "Not a git repo" && return 1
    
    local base_url="$(git remote get-url origin)"
    base_url="${base_url%\.git}/tree/$(git rev-parse --abbrev-ref HEAD)"
    base_url="${base_url//git@github\.com:/https:\/\/github\.com\/}"
    base_url="${base_url//git:\/\/github\.com/https:\/\/github\.com\/}"

    open "${base_url}/$1" &> /dev/null || (echo "Failed to open url" && return 1)
}

# enerate a qrcode
qrcode() {
    curl "http://qrenco.de/$1"
}

# shows the current weather
weather() {
    if [ "$#" -lt 1 ]; then
        curl "http://wttr.in/$1"
    else
        curl "http://wttr.in/London"
    fi
}

# test if true colour is supported by the terminal
# https://gist.github.com/XVilka/8346728
true_colour_wave() {
    awk 'BEGIN{
        s="/\\/\\/\\/\\/\\"; s=s s s s s s s s;
        for (colnum = 0; colnum<77; colnum++) {
            r = 255-(colnum*255/76);
            g = (colnum*510/76);
            b = (colnum*255/76);
            if (g>255) g = 510-g;
            printf "\033[48;2;%d;%d;%dm", r,g,b;
            printf "\033[38;2;%d;%d;%dm", 255-r,255-g,255-b;
            printf "%s\033[0m", substr(s,colnum+1,1);
        }
        printf "\n";
    }'
}
