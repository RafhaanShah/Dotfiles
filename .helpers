### common use helper functions

# checks if the given command exists
_command_exists() { command -v "$1" >/dev/null 2>&1; }

# checks if the given variable is set
_variable_set() { [ -n "$1" ]; }

# checks if $2 begins with $1
_begins_with() { case "$2" in "$1"*) true;; *) false;; esac; }

# checks if $2 ends with $1
_ends_with() { case "$2" in *"$1") true;; *) false;; esac; }

# checks if we are running bash
_is_bash() { _variable_set "${BASH_VERSION}"; }

# checks if we are running zsh
_is_zsh() { _variable_set "${ZSH_VERSION}"; }

# checks if we are running in wsl
_is_wsl() { [ grep -qEi "(microsoft|WSL)" /proc/version &> /dev/null ]; }

# checks if we are running on macOS
_is_macos() { [ $(uname -s) = "Darwin" ]; }

# outputs git branch and status: master[4+!?$]
# number of changes, uncomitted, unstaged, untracked indicators
_prompt_git() {
	local s='';
	local br='';

	# check if git repo
	git rev-parse --is-inside-work-tree &>/dev/null || return;

	# check branch
	br="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
		git describe --all --exact-match HEAD 2> /dev/null || \
		git rev-parse --short HEAD 2> /dev/null || \
		echo '(unknown)')";

    # check for status counter
    local fc="$(git status --porcelain | wc -l | tr -d ' ')"
    if [ "${fc}" -gt 0 ]; then
        s+="${fc}";
    fi
	# check for uncomitted changes
	if ! $(git diff --quiet --ignore-submodules --cached); then
		s+='+';
	fi;
	# check for unstaged changes
	if ! $(git diff-files --quiet --ignore-submodules --); then
		s+='!';
	fi;
	# check for untracked files
	if [ -n "$(git ls-files --others --exclude-standard)" ]; then
		s+='?';
	fi;
	# check for stashed files
	if $(git rev-parse --verify refs/stash &>/dev/null); then
		s+='$';
	fi;

	[ -n "${s}" ] && s=" [${s}]";
    echo -e "${1}${br}${2}${s}"
}
