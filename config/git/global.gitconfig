### global git config
# https://git-scm.com/docs/git-config
# to be included in main .gitconfig
# [include]
#    path = ~/Dotfiles/config/git/global.gitconfig

[core]
    # editor used, GIT_EDITOR overrides this
    editor = nano
    # pager used, GIT_PAGER overrides this
    pager = less
    # speed up commands involving untracked files
    untrackedCache = true
    # global gitignore file
    excludesfile = ~/Dotfiles/config/git/global.gitignore

[pull]
    # rebase local branches on top of the fetched branch, instead of merging
    rebase = true

[fetch]
    # remove any remote-tracking references that no longer exist on the remote
    prune = true

[help]
    # correct and execute mistyped commands after 5 seconds
    autocorrect = 50

[apply]
    # detect and fix whitespace errors
    whitespace = fix

[branch]
    # show most recently changed branches first
    sort = -committerdate

[rebase]
    # update dependent branches when a base branch has been rebased
    updateRefs = true

[alias]
    al = aliases
    ad = add
    amd = amend
    br = branch
    cl = clone
    cm = commit --message
    co = checkout
    disc = discard
    fr = fetch-remote
    last = log -p -1
    lg = log-pretty
    ll = log
    mr = merge-req
    pr = pull-req
    pl = pull
    ps = push
    st = status
    sq = squash
    unst = unstage
    upd = update

    aliases = "!al() { git config --get-regexp alias | grep \"${*:-alias}\"; }; al"
    amend = commit --amend
    amend-date = commit --amend --no-edit --date=now
    cleanup = "!cln() { git branch -vv | grep ': gone]'|  grep -v \"*\" | awk '{ print $1; }' | xargs git branch -D; }; cln"
    current-branch = "!cbr() { git rev-parse --abbrev-ref HEAD; }; cbr"
    default-branch = "!dbr() { br=\"$(git rev-parse --abbrev-ref origin/HEAD)\" && echo \"${br#origin/}\"; }; dbr"
    discard = reset --hard
    duet = "!dt() { git commit --message $1 --author $2 <$3> --signoff; }; dt"
    empty = commit --allow-empty --message 'Retry CI'
    fetch-remote = "!fr() { br=\"${1:-$(git default-branch)}\" && git fetch origin $br:$br; }; fr"
    log-pretty = log -n 20 --graph --pretty=format:'%Cred%h%Creset %C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit
    merge-remote = "!mrgr() { git fetch-remote "${1:-$(git default-branch)}" && git merge "${1:-$(git default-branch)}"; }; mrgr"
    merge-req = "!mr() { open \"$(git url)/-/merge_requests/new?merge_request[source_branch]=$(git current-branch)&merge_request[target_branch]=${1:-$(git default-branch)}\"; }; mr"
    pull-req = "!pr() { open \"$(git url)/compare/${1:-$(git default-branch)}...$(git current-branch)\"; }; pr"
    nuke = "!nk() { git reset --hard origin/\"$(git current-branch)\"; }; nk"
    repo = "!rp() { open \"$(git url)/tree/$(git current-branch)\"; }; rp"
    rebase-remote = "!rebr() { git fetch-remote "${1:-$(git default-branch)}" && git rebase "${1:-$(git default-branch)}"; }; rebr"
    squash = "!sq() { git rebase -i \"HEAD~${1:-2}\" && git commit --amend --date=\"now\" --no-edit; }; sq"
    undo = reset --soft HEAD~1
    unstage = reset
    update = "!upd() { git add . && git amend --no-edit; }; upd"
    url = "!url() { base=\"$(git remote get-url origin)\" && echo \"${base%.git}\"; }; url"
